#include <stdio.h>
#include <stdlib.h> 
#include <malloc.h>

typedef struct line
{
	int n;
	int *a;
}line;

typedef struct matrix
{
	int lines;
	line *matr;
}matrix;

int getInt(int* a) 
{
	int n;
	do {
		n = scanf_s("%d", a);
		if (n < 0)
			return 0;
		if (n == 0) 
		{
			printf("%s\n", "Error! Repeat input");
			scanf_s("%*[^\n]", 0);
		}
	} while (n == 0);
	return 1;
}

int getNaturalInt(int* a) 
{
	int n;
	do {
		n = scanf_s("%d", a);
		if (n < 0)
			return 0;
		if (n == 0 || *a <= 0) 
		{
			printf("%s\n", "Error! Please, repeat: ");
			scanf_s("%*[^\n]", 0);
		}
	} while (n == 0 || *a <= 0);
	return 1;
}


void input(int* m, struct matrix* matrix)
{
	int n;
	int i;
	int j;
	printf_s("Vvedite kolichestvo strok v matrise: \n");


	getNaturalInt(m);
	(*matrix).lines = (*m);
	(*matrix).matr = (line*)calloc((*m), sizeof(line));

	for (i = 0; i < (*m); ++i)
	{
		printf("Vvedite kolichestvo elementov v %d stroke\n", i + 1);
		getNaturalInt(&n);
		(*matrix).matr[i].n = n;
		(*matrix).matr[i].a = (int*)calloc(n, sizeof(int));
		printf("vvedite elementi %d-oi stroki\n", i + 1);

		for (j = 0; j < n; j++) {
			getInt(&(*matrix).matr[i].a[j]);
		}
	}
}


void print(matrix* rm) 
{
	int i, j;
	for (i = 0; i < rm->lines; i++) 
	{
		for (j = 0; j < rm->matr[i].n; j++) 
		{
			printf("%d ", rm->matr[i].a[j]);
		}
		printf("\n");
	}
	printf("\n");
}


int summa(int* arr, int n) 
{
	int i;
	int chet = 0, nechet = 0;
	int sum = 0;

	for (i = 0; i < n; ++i) 
	
	{
		if (i % 2 == 0)
		{
			nechet = nechet + *(arr + i);
		}
		else
		{
			chet = chet + *(arr + i);
		}

		sum = chet - nechet;
	}
	return sum;
}
void printV(int* vec, int size) 
{
	int i;
	printf("\nIt's vector: \n");
	for (i = 0; i < size; i++) 
	{
		printf("%d ", *vec++);
	}
	printf("\n");
}

int main() 
{
	int m, i;
	struct matrix matrix;
	int* vector;
	int* ptr;

	input(&m, &matrix); // ввод матрицы 

	printf("Vvedennaya matrisa: \n");
	print(&matrix); // вывод матрицы 

	vector = (int*)malloc(m * sizeof(vector));

	ptr = vector;

	for (i = 0; i < m; i++) { // заполнение вектора 
		*ptr++ = summa(matrix.matr[i].a, matrix.matr[i].n);
	}

	printV(vector, m);
	system("pause");
	return 0;
	
}
